import datetime

## Problem 1
## If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
## The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.
## Answer 233168
mult_totals = 0

## Loop over and total up
for i in range(1000):
    print(i)
    if i % 3 == 0 or i % 5 == 0:
        mult_totals += i

print(mult_totals)

## Problem 2
## Each new term in the Fibonacci sequence is generated by adding the previous two terms.
## By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
## By considering the terms in the Fibonacci sequence whose values do not exceed four
## million, find the sum of the even-valued terms.
next_number = 3
end_number = 4000000
fib_numbers = [1,2]
even_numbers = [2]

while next_number < end_number:
    to_add = next_number
    next_number += fib_numbers[-1]
    if to_add % 2 == 0:
        even_numbers.append(to_add)
    fib_numbers.append(to_add)

print(sum(even_numbers))

## Problem 3
## The prime factors of 13195 are 5, 7, 13 and 29.
## What is the largest prime factor of the number 600851475143?
import math

factors = []
n = 600851475143

for i in range(2, math.ceil(math.sqrt(n))):
    while n % i == 0:
        factors.append(i)
        n = n / i

print(factors[-1])

## Problem 4
## A palindromic number reads the same both ways. The largest palindrome made from
## the product of two 2-digit numbers is 9009 = 91 × 99.
## Find the largest palindrome made from the product of two 3-digit numbers.
n = 0
for a in range(999, 100, -1):
    print('A:', a)
    for b in range(a, 100, -1):
        print('B: ', b)
        x = a * b
        if x > n:
            s = str(a * b)
            if s == s[::-1]:
                n = a * b

print('A:', a)
print('B: ', b)
print("Palindrome: ", n)

## Problem 5
## 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
## What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
start_time = datetime.datetime.now()

match_found = False
match = 1
n = 1000000

while match_found == False:
    print(n)
    n += 1

    if n % 20 == 0:
        if n % 19 == 0:
            if n % 18 == 0:
                if n % 17 == 0:
                    if n % 16 == 0:
                        if n % 15 == 0:
                            if n % 14 == 0:
                                if n % 13 == 0:
                                    if n % 12 == 0:
                                        if n % 11 == 0:
                                            if n % 10 == 0:
                                                if n % 9 == 0:
                                                    if n % 8 == 0:
                                                        if n % 7 == 0:
                                                            if n % 6 == 0:
                                                                if n % 5 == 0:
                                                                    if n % 4 == 0:
                                                                        if n % 3 == 0:
                                                                            if n % 2 == 0:
                                                                                match = n
                                                                                match_found = True

end_time = datetime.datetime.now()

print("Match Found:", n) # 232792560
print('Elapsed Time: ', end_time - start_time)

## Problem 6
## The sum of the squares of the first ten natural numbers is, 1^2 + 2^2 + ... + 10^2 = 385
## The square of the sum of the first ten natural numbers is, (1 + 2 + ... + 10)2 = 55^2 = 3025
## Hence the difference between the sum of the squares of the first ten natural numbers and
## the square of the sum is 3025 − 385 = 2640. Find the difference between the sum of the squares
## of the first one hundred natural numbers and the square of the sum.
sum_100 = 0
sum_100_square = 0

for number in range(101):
    sum_100 += number ** 2

for number in range(101):
    sum_100_square += number

sum_100_square = sum_100_square ** 2

difference = sum_100_square - sum_100

print('Difference: ', difference)

## Problem 7
## By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
## What is the 10001st prime number?
def isPrime(n):
    if n < 2: return "Neither prime, nor composite"
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# returns the nth prime number
def nthPrime(n):
    numberOfPrimes = 0
    prime = 1

    while numberOfPrimes < n:
        prime += 1
        if isPrime(prime):
            numberOfPrimes += 1
    return prime

print(nthPrime(10001))

## Problem 8
## The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
## 731671765313306249192251196744265747423553491949349698352031277450632623957831801698480186947885184385861560
## 789112949495459501737958331952853208805511125406987471585238630507156932909632952274430435576689664895044524
## 452316173185640309871112172238311362229893423380308135336276614282806444486645238749303589072962904915604407
## 723907138105158593079608667017242712188399879790879227492190169972088809377665727333001053367881220235421809
## 751254540594752243525849077116705560136048395864467063244157221553975369781797784617406495514929086256932197
## 846862248283972241375657056057490261407972968652414535100474821663704844031998900088952434506585412275886668
## 811642717147992444292823086346567481391912316282458617866458359124566529476545682848912883142607690042242190
## 226710556263211111093705442175069416589604080719840385096245544436298123098787992724428490918884580156166097
## 919133875499200524063689912560717606058861164671094050775410022569831552000559357297257163626956188267042825
## 2483600823257530420752963450
## Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
## Answer - 23514624000
number = """7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"""

max_number = 0
start_index = 0

while len(number[start_index:start_index + 13]) == 13:
    print(number[start_index:start_index + 13], ' - ', len(number[start_index:start_index + 13]))
    number_to_check = number[start_index:start_index + 13]
    multiple = 1
    index = 0

    for num in number_to_check:
        multiple *= int(num)

    if multiple > max_number:
        max_number = multiple

    start_index += 1

## Problem 9
## A Pythagorean triplet is a set of three natural numbers, a < b < c, for which, a^2 + b^2 = c^2
## For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
##There exists exactly one Pythagorean triplet for which a + b + c = 1000. Find the product abc.




## Problem 25
## The Fibonacci sequence is defined by the recurrence relation:
## Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
## Hence the first 12 terms will be:
## F1 = 1, F2 = 1, F3 = 2, F4 = 3, F5 = 5, F6 = 8, F7 = 13,
## F8 = 21, F9 = 34, F10 = 55, F11 = 89, F12 = 144
## The 12th term, F12, is the first term to contain three digits.
## What is the index of the first term in the Fibonacci sequence to contain 1000 digits?
## million, find the sum of the even-valued terms.
fib_numbers = [0,1]
num_length = 0

while num_length != 1000:
    next_number = fib_numbers[-1] + fib_numbers[-2]
    print(next_number)
    fib_numbers.append(next_number)
    num_length = len(str(next_number))